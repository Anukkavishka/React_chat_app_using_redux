{"ast":null,"code":"import _objectSpread from \"C:\\\\Users\\\\ankalk\\\\Documents\\\\React_chat_app\\\\bokkah\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\n\nvar shortid = require(\"shortid\"); // shortid.generate() returns a unique \"short\" id\n\n\nvar txtgen = require(\"txtgen\"); // txtgen.sentence() returns random \"readable\" sentences\n\n\nvar faker = require(\"faker\"); // faker is used for generating random fake data.\n\n\nvar _ = require(\"lodash\"); // lodash is a utility lib for Javascript\n\n\nvar users = generateUsers(10);\nexport var contacts = _.mapKeys(users, \"user_id\");\nexport var getMessages = function getMessages(messagesPerUser) {\n  var messages = {};\n\n  _.forEach(users, function (user) {\n    messages[user.user_id] = _objectSpread({}, _.mapKeys(generateMsgs(messagesPerUser), \"number\"));\n  });\n\n  return messages;\n}; // just an example of how the state object is structured\n\nexport var state = {\n  user: generateUser(),\n  messages: getMessages(10),\n  typing: \"\",\n  contacts: contacts,\n  activeUserId: null\n};\n/**\r\n * @returns {Object} - a new user object\r\n */\n\nexport function generateUser() {\n  return {\n    name: faker.name.findName(),\n    email: faker.internet.email(),\n    profile_pic: faker.internet.avatar(),\n    status: txtgen.sentence(),\n    user_id: shortid.generate()\n  };\n}\n/**\r\n * @returns {Object} - a new message object\r\n */\n\nfunction generateMsg(number) {\n  return {\n    number: number,\n    text: txtgen.sentence(),\n    is_user_msg: faker.random.boolean()\n  };\n}\n/**\r\n *\r\n * @param {Number} numberOfUsers - the number of users to be generated\r\n * @param {Function} generateUser - function that generates a single user\r\n * @returns {Array} - an array of user objects with length n = numberOfUsers\r\n */\n\n\nfunction generateUsers(numberOfUsers) {\n  return Array.from({\n    length: numberOfUsers\n  }, function () {\n    return generateUser();\n  });\n}\n\nfunction generateMsgs(numberOfMsgs) {\n  return Array.from({\n    length: numberOfMsgs\n  }, function (v, i) {\n    return generateMsg(i);\n  });\n}","map":{"version":3,"sources":["C:\\Users\\ankalk\\Documents\\React_chat_app\\bokkah\\src\\utils\\static-data.js"],"names":["shortid","require","txtgen","faker","_","users","generateUsers","contacts","mapKeys","getMessages","messagesPerUser","messages","forEach","user","user_id","generateMsgs","state","generateUser","typing","activeUserId","name","findName","email","internet","profile_pic","avatar","status","sentence","generate","generateMsg","number","text","is_user_msg","random","boolean","numberOfUsers","Array","from","length","numberOfMsgs","v","i"],"mappings":";;AAAA,IAAMA,OAAO,GAAGC,OAAO,CAAC,SAAD,CAAvB,C,CAAoC;;;AACpC,IAAMC,MAAM,GAAGD,OAAO,CAAC,QAAD,CAAtB,C,CAAkC;;;AAClC,IAAME,KAAK,GAAGF,OAAO,CAAC,OAAD,CAArB,C,CAAgC;;;AAChC,IAAMG,CAAC,GAAGH,OAAO,CAAC,QAAD,CAAjB,C,CAA6B;;;AAE7B,IAAMI,KAAK,GAAGC,aAAa,CAAC,EAAD,CAA3B;AACA,OAAO,IAAMC,QAAQ,GAAGH,CAAC,CAACI,OAAF,CAAUH,KAAV,EAAiB,SAAjB,CAAjB;AACP,OAAO,IAAMI,WAAW,GAAG,SAAdA,WAAc,CAAAC,eAAe,EAAI;AAC5C,MAAIC,QAAQ,GAAG,EAAf;;AACAP,EAAAA,CAAC,CAACQ,OAAF,CAAUP,KAAV,EAAiB,UAAAQ,IAAI,EAAI;AACvBF,IAAAA,QAAQ,CAACE,IAAI,CAACC,OAAN,CAAR,qBACKV,CAAC,CAACI,OAAF,CAAUO,YAAY,CAACL,eAAD,CAAtB,EAAyC,QAAzC,CADL;AAGD,GAJD;;AAKA,SAAOC,QAAP;AACD,CARM,C,CAUP;;AACA,OAAO,IAAMK,KAAK,GAAG;AACnBH,EAAAA,IAAI,EAAEI,YAAY,EADC;AAEnBN,EAAAA,QAAQ,EAAEF,WAAW,CAAC,EAAD,CAFF;AAGnBS,EAAAA,MAAM,EAAE,EAHW;AAInBX,EAAAA,QAAQ,EAARA,QAJmB;AAKnBY,EAAAA,YAAY,EAAE;AALK,CAAd;AAQP;;;;AAGA,OAAO,SAASF,YAAT,GAAwB;AAC7B,SAAO;AACLG,IAAAA,IAAI,EAAEjB,KAAK,CAACiB,IAAN,CAAWC,QAAX,EADD;AAELC,IAAAA,KAAK,EAAEnB,KAAK,CAACoB,QAAN,CAAeD,KAAf,EAFF;AAGLE,IAAAA,WAAW,EAAErB,KAAK,CAACoB,QAAN,CAAeE,MAAf,EAHR;AAILC,IAAAA,MAAM,EAAExB,MAAM,CAACyB,QAAP,EAJH;AAKLb,IAAAA,OAAO,EAAEd,OAAO,CAAC4B,QAAR;AALJ,GAAP;AAOD;AACD;;;;AAGA,SAASC,WAAT,CAAqBC,MAArB,EAA6B;AAC3B,SAAO;AACLA,IAAAA,MAAM,EAANA,MADK;AAELC,IAAAA,IAAI,EAAE7B,MAAM,CAACyB,QAAP,EAFD;AAGLK,IAAAA,WAAW,EAAE7B,KAAK,CAAC8B,MAAN,CAAaC,OAAb;AAHR,GAAP;AAKD;AACD;;;;;;;;AAMA,SAAS5B,aAAT,CAAuB6B,aAAvB,EAAsC;AACpC,SAAOC,KAAK,CAACC,IAAN,CAAW;AAAEC,IAAAA,MAAM,EAAEH;AAAV,GAAX,EAAsC;AAAA,WAAMlB,YAAY,EAAlB;AAAA,GAAtC,CAAP;AACD;;AAED,SAASF,YAAT,CAAsBwB,YAAtB,EAAoC;AAClC,SAAOH,KAAK,CAACC,IAAN,CAAW;AAAEC,IAAAA,MAAM,EAAEC;AAAV,GAAX,EAAqC,UAACC,CAAD,EAAIC,CAAJ;AAAA,WAAUZ,WAAW,CAACY,CAAD,CAArB;AAAA,GAArC,CAAP;AACD","sourcesContent":["const shortid = require(\"shortid\"); // shortid.generate() returns a unique \"short\" id\r\nconst txtgen = require(\"txtgen\"); // txtgen.sentence() returns random \"readable\" sentences\r\nconst faker = require(\"faker\"); // faker is used for generating random fake data.\r\nconst _ = require(\"lodash\"); // lodash is a utility lib for Javascript\r\n\r\nconst users = generateUsers(10);\r\nexport const contacts = _.mapKeys(users, \"user_id\");\r\nexport const getMessages = messagesPerUser => {\r\n  let messages = {};\r\n  _.forEach(users, user => {\r\n    messages[user.user_id] = {\r\n      ..._.mapKeys(generateMsgs(messagesPerUser), \"number\")\r\n    };\r\n  });\r\n  return messages;\r\n};\r\n\r\n// just an example of how the state object is structured\r\nexport const state = {\r\n  user: generateUser(),\r\n  messages: getMessages(10),\r\n  typing: \"\",\r\n  contacts,\r\n  activeUserId: null\r\n};\r\n\r\n/**\r\n * @returns {Object} - a new user object\r\n */\r\nexport function generateUser() {\r\n  return {\r\n    name: faker.name.findName(),\r\n    email: faker.internet.email(),\r\n    profile_pic: faker.internet.avatar(),\r\n    status: txtgen.sentence(),\r\n    user_id: shortid.generate()\r\n  };\r\n}\r\n/**\r\n * @returns {Object} - a new message object\r\n */\r\nfunction generateMsg(number) {\r\n  return {\r\n    number,\r\n    text: txtgen.sentence(),\r\n    is_user_msg: faker.random.boolean()\r\n  };\r\n}\r\n/**\r\n *\r\n * @param {Number} numberOfUsers - the number of users to be generated\r\n * @param {Function} generateUser - function that generates a single user\r\n * @returns {Array} - an array of user objects with length n = numberOfUsers\r\n */\r\nfunction generateUsers(numberOfUsers) {\r\n  return Array.from({ length: numberOfUsers }, () => generateUser());\r\n}\r\n\r\nfunction generateMsgs(numberOfMsgs) {\r\n  return Array.from({ length: numberOfMsgs }, (v, i) => generateMsg(i));\r\n}\r\n"]},"metadata":{},"sourceType":"module"}